#!/usr/bin/env python
# AUTHOR:  Dan Oblinger  <code@oblinger.us>
# CREATE:  2015-01-10
# MODULE:



import re
import os
import subprocess
import traceback
import textwrap
import time
import json

# cmd_fix
# current_link should check if file is document or folder and set action
# do this:   installer, move /ob/cmd, add 'icon' to apps


CREATE_JREFS = True   # Controls if 'rescan' will create j-prefix commands for each folder
RESCAN_ROOT = '/ob'
HOME = os.getenv('HOME')
LAUNCH_LOG = '%s/.ll_launchlog' % HOME
PARAMS_FILE = '%s/.ll_params' % HOME
CMD_DIR = '%s/cmd' % HOME
EDITOR = os.getenv('EDITOR', 'open -e')
EDITOR = '_edit'     # todo: FIX THIS
APPLET_FOLDER = '/Applications/ll.app/Contents/MacOS'
KEY_REGEX = re.compile('^# ([^:]*):(.*)$')
WORD_REGEX = re.compile('^[a-z,A-Z,0-9,-_]*$')
ACTIONS = ['app', 'command', 'doc', 'folder', 'none', 'python', 'script', 'sh', 'url', 'nstr'] #, 'chrome']
SHORTCUTS = {'b':'browser',  'c':'create',   'cp':'copy',  'e':'edit',
             'f':'finder',   'ls':'list',    'mv':'move',  'nb':'named_browser', 'nf':'named_finder',
             'p':'print',    'rm':'remove',  'v':'view',
             'x':'execute',  '?':'usage'}
ACTIONS = ['app', 'command', 'doc', 'folder', 'none', 'python', 'script', 'sh', 'url', 'nstr'] #, 'chrome']


USAGE = \
"""
    *     COMMAND
    b   --browser       name                captures current BROWSER url
    c   --create        name type target    CREATE 'name' that links 'typed' 'target'
    cp  --copy          name newname        COPIES command to new name
        --debug         name                DEBUGS the execution of named command
    e   --edit          name                EDIT
    f   --finder        name                captures current finder item
        --fix                               FIXES previous command
        --install                           INSTALLS special commands
    ls  --list                              performs LS style list of commands
    mv  --move          name newname        MOVES command to new name
        --new           name                Creates a NEW command (with no action)
    nb  --named-browser name
    nf  --named-finder  name
    p   --print         name                PRINTS the folder associated w. 'name'
        --rebuild                           scans all commands and REBUILDS them
    rm  --remove        name                REMOVES command
        --rescan                            scans ALL FOLDERS looking for targets for missing commands
        --verify                            scans all commands and VERIFIES their targets are valid
    v   --view          name
    x   --execute       name                EXECUTES 'name'd command
    ?   --usage                             prints this USAGE message
        --set
        --scan                              SCANS filesystem looking for named files
        --test

 * NOTE: single or double character is a shortcut for the command to its right.


  CAP TYPES  (Command APplication Types)
    app          launches 'target' application
    command      executed 'target' as a /bin/sh shell command line
    doc          opens 'target' as a DOCument
    folder       opens 'target' as a FOLDER
    none         no action taken
    python       executes entire 'applet' file as a python script.
    script       executes entire 'applet' files as a script.
                 'target' specifies either the 'python' or 'sh' interpreter
    sh           executes entire 'applet' file using the /bin/sh interpreter
    url          opens 'target' as a URL using a web browser
    nstr         opens name in notester
"""


APPLET_PREFIX = \
"""#!/usr/bin/osascript
do shell script   ("/usr/bin/env ruby " & (get POSIX path of (path to home folder)) as string & "cmd/_launcher.rb -x \\"" & (POSIX path of (path to me)) & "\\"") #$Cmd~File: v1.1-13.06.28
"""

PYTHON_LAUNCHER_PREFIX = \
"""#!/usr/bin/env python /Applications/ll.app/Contents/MacOS/launcher.py --launch
"""


INFO_PLIST_BODY = \
"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleAllowMixedLocalizations</key>
	<true/>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>applet</string>
	<key>CFBundleIconFile</key>
	<string>applet</string>
	<key>CFBundleIdentifier</key>
	<string>com.apple.ScriptEditor.id.jdata7</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>jdata7</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>aplt</string>
	<key>LSMinimumSystemVersionByArchitecture</key>
	<dict>
		<key>x86_64</key>
		<string>10.6</string>
	</dict>
	<key>LSRequiresCarbon</key>
	<true/>
	<key>WindowState</key>
	<dict>
		<key>bundleDividerCollapsed</key>
		<true/>
		<key>bundlePositionOfDivider</key>
		<real>0</real>
		<key>dividerCollapsed</key>
		<false/>
		<key>eventLogLevel</key>
		<integer>2</integer>
		<key>name</key>
		<string>ScriptWindowState</string>
		<key>positionOfDivider</key>
		<real>389</real>
		<key>savedFrame</key>
		<string>50 32 700 640 0 0 1152 697 </string>
		<key>selectedTab</key>
		<string>description</string>
	</dict>
</dict>
</plist>
"""


def main():
    if not os.path.exists('%s/ctrl' % APPLET_FOLDER):
        print "Copy the app into the /Applications folder and re-run."
        error("Application must run from the /Applications folder.")
    argv = os.sys.argv
    #argv = ['','--rescan']
    if len(argv)<2:
        cmd_install(reinstall=False)
        argv= ['cmd'] + raw_input('CMD> ').split()
        if len(argv)<=1:
            os.sys.exit(0)
    a1 = argv[1] if len(argv)>1 else ''

    if a1[0:2]=='--':   base = a1[2:]
    elif a1[0:1]=='-':    base = a1[1:]
    else: base = a1
    base = SHORTCUTS.get(base) or base
    base = base.lower().replace('-', '_')
    try:   fn=globals()['cmd_%s' % base]     # Try calling the appropriate 'cmd_...' function
    except KeyError:
        print "ERROR:  Unknown command '%s'" % a1
        return
    fn()




################################################################################
###  COMMANDS

def cmd_browser(name=None):
    """Import doc link from BROWSER."""
    name = name or arg(1, 'Enter name for URL link')
    if not name: error('No name specified.')
    url = get_chrome_url()
    cap_set({NAME:name, ACTION:'url', TARGET:url})


def cmd_copy():
    name    = arg(1, prompt='Enter name of command to copy')
    newname = arg(2, prompt='Enter new destination name for copy')
    cap  = cap_get_by_name(name)
    print '### Copying %r to %r' % (name, newname)
    cap[NAME] = newname
    cap_set(cap)


def cmd_create():
    """Creates a new cmd app"""
    name   = arg(1, prompt='Name of cap to create', error_string='Name required.')
    action = arg(2, prompt='Cap action (%s)' % ', '.join(ACTIONS), error_string='Action required.')
    target = arg(3, prompt='Cap target', error_string='Target required')
    keys = {FOLDER:CMD_DIR, NAME:name, ACTION:action, TARGET:target}
    cap_set(keys)


def cmd_debug():
    prefix = arg(1, prompt='Enter name to edit')
    path = cap_path( cap_get_by_name(prefix) )
    print("### Debugging execution of CAP command %r" % path)
    os.system('/usr/bin/env python %s/launcher.py --debug --launch %s/Contents/MacOS/applet' % (APPLET_FOLDER, path))


# Bug:  'clean_file' may not run after edit, then file is permanently broken since it cannot cap_find_one
def cmd_edit():
    """Edits the specified command."""
    prefix = arg(1, prompt='Enter name to edit', default=None)
    if not prefix:
        return
    path = cap_find_one(prefix) + '/Contents/MacOS/applet'
    clean_file(path)
    os.system('%s "%s"' % (EDITOR, path))
    clean_file(path)


def clean_file(path):
    original = read_file(path)
    contents = original.replace('\xe2', "'")
    contents = contents.replace('\x80', "")
    contents = contents.replace('\x98', "")
    contents = contents.replace('\x99', "")
    contents = contents.encode('ascii', 'ignore')
    if original!=contents:
        write_file(path, contents)

# def clean_file(path):
#     os.system('iconv -f iso-8859-1 -t utf-8 < "%s" > "%s.txt"' % (path, path))


def cmd_finder(name=None):
    """Import doc link from FINDER."""
    target_folder =  get_finder_path()[:-1]   # strip trailing '/'
    target_file = get_clipboard()
    target = target_folder+'/'+target_file
    name = name or os.path.splitext(target_file)[0]
    if not os.path.exists(target):
        error("Could not find file '%s'" % target)
    print "NAME:%s   TARGET:%s   DIR:%s  FILE:%s" % (name, target, target_folder, target_file)
    cap_set({NAME:name, ACTION:'doc', TARGET:target})
    cap_set({NAME:'J'+name, ACTION:'folder', TARGET:target_folder})


def cmd_fix():
    name = get_clipboard()
    if len(name)>2 and len(name)<20 and re.match(WORD_REGEX, name):
        params(fix_command=name, time=int(time.time()))
    else:
        last_command_append({'error':'bad command', 'thename':name})


def cmd_last():
    cap = get_current_link()
    p   = params()
    cap[NAME] = name = p.get('fix_command')
    print "params %r" % p
    if name and time.time()-p['time']<60:
        cap_set(cap, verbose=True)
        cmd_execute(name)


def cmd_install(reinstall=True):
    if not reinstall and os.path.exists(CMD_DIR):
        return
    print '\nCONFIGURING SPOTLIGHT-NINJA\n'
    script = '%s/ctrl' % APPLET_FOLDER
    if not os.path.exists(CMD_DIR):
        print 'Creating folder %r' % CMD_DIR
        os.makedirs(CMD_DIR)
    cap_set({NAME:'ll',   ACTION:'command', TARGET:'%s'        % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'llb',  ACTION:'command', TARGET:'%s -b'     % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'llcp', ACTION:'command', TARGET:'%s cp %%s' % script, IO: 'pinned',   PROMPT: 'CMD COPY.  Enter source & dest'}, verbose=True)
    cap_set({NAME:'llc',  ACTION:'command', TARGET:'%s -c'     % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'lle',  ACTION:'command', TARGET:'%s -e %%s' % script,                 PROMPT: 'Launcher Edit'}, verbose=True)
    cap_set({NAME:'llf',  ACTION:'command', TARGET:'%s -f'     % script},                verbose=True)
    cap_set({NAME:'llls', ACTION:'command', TARGET:'%s ls'     % script, IO: 'pinned'},  verbose=True)
    cap_set({NAME:'llmv', ACTION:'command', TARGET:'%s mv %%s' % script, IO: 'pinned',   PROMPT: 'CMD MOVE.  Enter source & dest'}, verbose=True)
    cap_set({NAME:'llnb', ACTION:'command', TARGET:'%s -nb'    % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'llnf', ACTION:'command', TARGET:'%s -nf'    % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'llrm', ACTION:'command', TARGET:'%s rm %%s' % script, IO: 'pinned',   PROMPT: 'CMD REMOVE.  Enter name'}, verbose=True)
    cap_set({NAME:'llv',  ACTION:'command', TARGET:'%s -v'     % script, IO: 'pinned'},  verbose=True)
    cap_set({NAME:'COPY', ACTION:'command', TARGET:'%s copy'   % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'FIX',  ACTION:'command', TARGET:'%s fix'    % script},                verbose=True)
    cap_set({NAME:'LAST', ACTION:'command', TARGET:'%s last'   % script},                verbose=True)
    cap_set({NAME:'NEW',  ACTION:'command', TARGET:'%s new'    % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'SET',  ACTION:'command', TARGET:'%s set'    % script, IO: 'console'}, verbose=True)
    cap_set({NAME:'ss',   ACTION:'command', TARGET:'%s ss'     % script, IO: 'console'}, verbose=True)


def cmd_list():
    prefix = arg(1, default='')
    names = [cap_get(path)[NAME].ljust(18) for path in cap_find_all(prefix)]
    print 'COMMANDS:\n%s\n\n' % textwrap.fill('  '.join(names),80)


def cmd_move():
    name    = arg(1, prompt='Enter name of command to move')
    newname = arg(2, prompt='Enter new destination name for move')
    cap  = cap_get_by_name(name)
    print '### Moving %r to %r' % (name, newname)
    cap_delete(cap)
    cap[NAME] = newname
    cap_set(cap)


def cmd_named_browser():
    """Prompts user for name for link to URL in the top Chrome tab"""
    cmd_browser(prompt('Enter name for link to current Chrome URL'))


def cmd_named_finder():
    """Prompts user for name for link to document selected in finder"""
    cmd_finder(prompt('Enter name for link to file selected & clipboarded in Finder'))


def cmd_new():
    name = arg(1, prompt='Enter name of new (empty) command.')
    caps = cap_find_all(name+'.')
    if len(caps)==0:
        cap_set({NAME:name, ACTION:'none', TARGET:'none'})
        cmd_execute(name)


def cmd_print():
    """Prints folder associated with the specified command."""
    prefix = arg(1)
    cap = cap_get_by_name(prefix)
    if cap[ACTION] not in ['doc', 'folder', 'app']:
        error("Command type %r does not have an associated folder." % CAP[ACTION])
    path = cap[TARGET]
    if os.path.splitext(path)[1]!='':
        path = os.path.dirname(path)
    print path


def cmd_rebuild():
    folder = CMD_DIR
    a1 = arg(1, default_value=None)
    suffix = ' starting with %r' % a1 if a1 else ''
    if 'y'!=prompt('press "y" to REBUILD each CAPs under %s%s' % (folder, suffix)):
        return
    for cap in cap_get_all(folder):
        if not a1 or cap[NAME].lower().startswith(a1.lower()):
            cap_delete(cap)  # ensures that command's case is not derived from the old cap.app
            cap_set(cap)


def cmd_remove():
    name =  arg(1, prompt='Enter name of command to remove')
    path  =  cap_find_one(name, require_valid_cap=False)
    print '### Deleting CAP "%s"' % path
    os.system('rm -r "%s"' % path)


def cmd_rescan(root=RESCAN_ROOT):
    print "### SCANNING FOLDERS UNDER %r FOR TARGETS FOR NEW COMMANDS" % root
    for f in recursive_file_gen(root):
        name,jtarget = get_named_referent(f)
        if name:
            cap  = cap_get_by_name(name, default=None)
            if not cap or cap[TARGET]!=f:
                print '### New FILE   link: %r to %r' % (name, f)
                cap_set({NAME:name, ACTION:'doc', TARGET:f})
            if jtarget and CREATE_JREFS:
                jname = 'j%s' % name
                jcap = cap_get_by_name(jname, default=None)
                if not jcap or jcap[TARGET]!=jtarget:
                    print '### New FOLDER link: %r to %r' % (jname, jtarget)
                    cap_set({NAME:jname, ACTION:'folder', TARGET:jtarget})




def cmd_set(ask=True):
    last_cmd_name = last_command_name()
    cap           = get_current_link()
    if ask:
        cap[NAME]   = prompt('Command to set', last_cmd_name)
        cap[ACTION] = prompt('Command action', cap.get(ACTION, ''))
        cap[TARGET] = prompt('Command target', cap.get(TARGET, ''))
    cap_set(cap)


# BUG what about when there is no last command or curr cap???
def cmd_ss(**kwargs):
    ask = kwargs.get('ask', True)
    cur_cap   = get_current_link_while_in_console()
    name = last_command_name()
    last_cap  = name and cap_get_by_name(name+'.')
    cmd       = 'c' # value used if not 'ask'
    if ask:
        print "SET COMMAND\n"
        name = prompt('Set command named', name)
        print "Type 'c' or 'p' to assign CURRENT WINDOW, or PREVIOUS COMMAND to '%s'" % name
        print "Or type  'url', 'doc', 'folder' then paste any other target URL or path"
        print
        print "  Current:  %s" % cap_desc(cur_cap)
        if last_cap:  print "  Previous: %s" % cap_desc(last_cap)
        print
        cmd = prompt('Set %r as' % name)
    if cmd == 'p':
        cap = last_cap
    elif cmd == 'c':
        cap = cur_cap
    elif cmd.strip() == '':
        return
    else:
        cap = {NAME:name}
        idx = cmd.index(' ')
        cap[ACTION]=cmd[:idx].strip()
        cap[TARGET]=cmd[idx:].strip()
        if cap[ACTION] not in ACTIONS:
            error("Command link to a known action: %s" % ACTIONS_NAMES)
    cap[NAME]=name
    cap_set(cap)
    clear_screen()
    print '\nSUCCESS.\n\nCommand "%s" now set to %s\n' % (cap[NAME], cap_desc(cap))
    default = 'n' if cmd=='c' and cap[ACTION] not in ['doc', 'folder'] else 'y'
    if not ask or yes_or_no('Launch command now', default):
        cmd_execute(cap[NAME])


def cmd_test():
    send_key(48, 'command down')


def cmd_test_scan(folder=CMD_DIR+'/old'):
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        keys = cap_get(path)
        if not keys:
            print "Ignoring %s" % path
            continue
        if keys[ACTION] not in ['doc', 'folder', 'url', 'app']:  print cap_to_str(keys)
        #if keys:  cap_set(keys)
        #if keys:  scan_rebuild_cap(keys)
        #scan_process_file(keys)


def cmd_usage():
    print USAGE
    os.sys.stdout.write('HIT RETURN TO EXIT')
    raw_input()


def cmd_verify():
    out = '/tmp/removal_script'
    folder = CMD_DIR
    with open(out, 'w') as f:
        for cap in cap_get_all(folder):
            if cap[ACTION] in ['app', 'doc', 'folder']:
                if not os.path.exists(cap[TARGET]):
                    f.write('ll --rm "%s"\n' % cap[NAME])
                    print "### ERROR in %r.  Target missing: %s" % (cap[NAME], cap[TARGET])
    print '\nNOTE:  See %r for script file to remove all commands with missing targets' % out


def cmd_view():
    last = last_command_name()
    name = arg(1, prompt='Enter name of command to view', default=last)
    for cap_file in cap_find_all(name):
        cap = cap_get(cap_file)
        if cap:
            print 'COMMAND %s' % cap_to_str(cap)


def cmd_execute(name=None):
    name = name or arg(1, prompt='Enter name of command to execute')
    path = cap_find_one(name)
    os.system('open "%s"' % path)



################################################################################
###  CAP OPERATORS
###
###
### STANDARD KEYS IN A COMMAND APP FILE AND IN A 'CAP' MAP
FOLDER  = 'folder'   # REQ  the folder where this command resides
NAME    = 'name'     # REQ  the name of this cap  (it folder name with the .app removed)
TYPE    = 'type'     # REQ  'scpt' 'app' 'webloc'
ACTION  = 'action'   # REQ  'doc' 'folder' 'url'
TARGET  = 'target'   # REQ
PROMPT  = 'prompt'   # opt  Causes user input (which updates the 'arg' var)
ARG     = 'arg'      # opt  Appended as arg for script & shell commands (usually set via 'prompt')
BODY    = 'body'     # opt  List of text lines after the last key value pair
IO      = 'io'       # opt  non-null means that command should execute within a console window



def cap_get(path):
    """returns map of standard info plus the key value pairs from a cmd app."""
    try:
        name_ext = os.path.basename(path)
        name     = os.path.splitext(name_ext)[0]
        keys = {FOLDER:os.path.dirname(path), NAME:name}

        if os.path.isfile(path) and os.path.splitext(path)[1]=='.webloc':
            keys[TYPE]='webloc'
            with open(path, 'r') as f:
                lines = f.readlines()
            if not lines[5].startswith('        <string>') or not lines[5].endswith('</string>\n'):
                print lines
                print 'WARNING:  Could not read cap %r' % path
                return None
            target = lines[5][16:-10]
            keys[ACTION]='url'
            keys[TARGET]=target
            return keys

        if os.path.isfile(path) and os.path.splitext(path)[1]=='.scpt':
            keys[TYPE]='scpt'
            with open(path, 'r') as f:
                for line in f.readlines():
                    idx = line.find(':')
                    if idx!=-1 and line.startswith('# '):
                        k = line[2:idx].strip()
                        v = line[idx+1:].strip()
                        keys[k]=v
            return keys

        if os.path.isdir(path) and os.path.splitext(path)[1]=='.app':
            body = []
            keys[TYPE]='app'
            with open('%s/Contents/MacOS/applet' % path, 'r') as f:
                for line in f.readlines():
                    body.append(line[:-1] if line[-1:]=='\n' else line)
                    result = re.search(KEY_REGEX, line)
                    if result:
                        body = []
                        keys[result.group(1).strip()] = result.group(2).strip()
            #if body[:1]==['']: body = body[1:]
            if body[-1:]==['\n']:  body = body[:-1]
            if len(body)!=0:  keys[BODY]=body
            if keys.get(ACTION) not in ACTIONS:
                print('WARNING: Illegal action %r in %s' % (keys.get(ACTION), keys.get(NAME)))
            return keys
    except:
        print "WARNING: Failure during reading application command configuaration"
        print traceback.format_exc()
        return None
    return None

def cap_get_by_name(prefix, **kwargs):
    """Like cap_get but uses 'prefix' to find cap file.  see 'cap_find_one' for kwargs."""
    cap_file = cap_find_one(prefix, **kwargs)
    return cap_get(cap_file) if cap_file else None

def cap_find_one(prefix, **kwargs):
    folder=kwargs.get('folder', CMD_DIR)
    require_valid_cap=kwargs.get('require_valid_cap', True)
    default = kwargs.get('default')
    paths = cap_find_all(prefix, folder, require_valid_cap)
    if len(paths)>1:
        paths2 = cap_find_all(prefix+'.', folder, require_valid_cap)   # try looking for a case insensitive exact match
        if len(paths2)==1: paths = paths2
    if len(paths)!=1 and 'default' in kwargs:
        return default
    if len(paths)==0:
        error('Command App starting with "%s..." not found under %s' % (prefix, folder))
    if len(paths)>1:
        error('Required exactly one matching command for %s, but found %s' %
              (prefix, ', '.join(['/%s/' % os.path.basename(p) for p in paths])))
    return paths[0]

def cap_find_all(prefix, folder=CMD_DIR, require_valid_cap=True):
    """Returns list of paths to matching cap files.
    if 'only_one' then only one cap path is returned, and an error is generated
    if more or fewer than one cap is found."""
    prefix = prefix.lower()
    paths = []
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        if name.lower().startswith(prefix) and (not require_valid_cap or cap_get(path)):
            paths.append(path)
    return paths

def cap_set(cap, **kwargs):
    verbose = kwargs.get('verbose', True)
    if verbose: print "### Creating Cmd App '%s' as a '%s' launcher..." % (cap[NAME], cap[ACTION])
    if not FOLDER in cap:  cap[FOLDER]=CMD_DIR
    if cap[ACTION] not in ACTIONS:
        error('Action %r must be one of: %s' % (cap[ACTION], ', '.join(ACTIONS)))
    cap_delete(cap)
    path = cap_path(cap)
    if not os.path.exists(path):
        os.makedirs('%s/Contents/MacOS' % path)
    write_file('%s/Contents/PkgInfo' % path, 'APPLaplt')
    write_file('%s/Contents/Info.plist' % path, INFO_PLIST_BODY)
    excludes   = ['prompt', 'action', 'target', 'type', 'path', 'body', 'folder', 'name'] # 'docstr', 'source'
    fixed_keys = '# action: %s\n# target: %s' % (cap['action'], cap.get('target'))
    if 'prompt' in cap: fixed_keys = '# prompt: %s\n%s' % (cap['prompt'], fixed_keys)
    other_keys = '\n'.join(['# %s: %s' % (k, v) for k,v in cap.items() if k not in excludes])
    contents = '%s\n%s\n%s\n' % (PYTHON_LAUNCHER_PREFIX, fixed_keys, other_keys)
    if BODY in cap:  contents = '%s%s\n' % (contents, '\n'.join(cap[BODY]))
    app_path = '%s/Contents/MacOS/applet' % path
    write_file(app_path, contents)
    os.system('chmod 755 "%s"' % app_path)
    os.system('mkdir "%s/Contents/Resources"' % path)
    os.system('cp "%s/../Resources/applet.icns" "%s/Contents/Resources"' % (APPLET_FOLDER, path))

def cap_delete(cap):
    """Deletes a cap entry."""
    path = cap_path(cap)
    if os.path.exists(path):
        os.system('rm -r "%s"' % path)

def cap_get_all(folder):
    """Returns list of all cap maps for each cap under 'folder'"""
    cap_maps = []
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        cap = cap_get(path)
        if cap:   cap_maps.append(cap)
    return cap_maps

def cap_path(cap):
    """Returns fullpath for cap"""
    return '%s/%s.app' % (cap[FOLDER], cap[NAME])

def cap_to_str(cap):
    """Returns string summary of a cap's parameters."""
    return 'N:%s  A:%s  T:%s' % (cap[NAME], cap[ACTION], cap[TARGET])

DESC_FORMATS = {'doc':'open document %r', 'folder': 'open folder %r', 'app':'launch app %r'}

def cap_desc(cap, max_len=74):
    a = cap[ACTION]
    desc = DESC_FORMATS.get(a,'launch %s %%r' % a) % cap[TARGET]
    return clip(desc, max_len)







###############################################################################
###   SUPPORT FUNCTIONS

def get_named_referent(f):
    """Returns referent name of f if it is a standard referent file.
    If the referent is also a FOLDER referent, then the path to that folder is also returned as a second arg """
    nsplit = os.path.splitext(os.path.basename(f))
    if nsplit[1] not in ['.org', '.md']:
        return None, None
    parent_path = os.path.dirname(f)
    parent = os.path.basename(parent_path)
    psplit = os.path.splitext(parent)

    pbase = psplit[0].lower().replace(' ','').lstrip('0123456789_-.')
    nbase = nsplit[0].lower().replace(' ','').lstrip('0123456789_-.')

    if nbase in ['readme', 'changelog', 'history']:
        return None, None                               # Ignore these files
    elif pbase==nbase:
        return nbase, parent_path                       # Return folder reference
    elif nsplit[0][0:1]=='_':
        return nbase, None                              # Return file reference
    else:
        return None, None                               # Return no reference at all


params_cache = None
def params(**updates):
    """Get/Set persistent parameters.  Accepts updates, returns current map of params"""
    global params_cache
    if not params_cache:
        try:
            with open(PARAMS_FILE, 'r') as f:
                params_cache = json.loads(f.read())
        except:
            params_cache = {}
    if updates:
        params_cache.update(updates)
        with open(PARAMS_FILE, 'w') as out:
            out.write(json.dumps(params_cache)+'\n')
    return params_cache


def get_current_link_while_in_console():
    send_key(48, 'command down')
    #time.sleep(0.2)
    cur_cap = get_current_link()
    send_key(48, 'command down')
    return cur_cap

def get_current_link():
    cap = {}
    current_app = get_app_in_focus()
    with open('/tmp/tmp', 'w') as f: f.write('cur app %r ' % current_app)
    if current_app=='Google Chrome':
        cap[TARGET] = get_chrome_url()
        cap[ACTION] = 'url'
    elif current_app=='Finder':
        cap[TARGET] = get_finder_selection_path()
        cap[ACTION] =  'doc'
    elif current_app=='':
        cap[TARGET] = 'none'
        cap[ACTION] = 'none'
    else:
        cap[ACTION] = 'app'
        cap[TARGET] = current_app
    return cap

def last_command_name():
    """Returns the last launched command that is not in the ignore list."""
    IGNORE = ['ss', 'ss1']
    def get_name(args):
        fldr = os.path.dirname(os.path.dirname(os.path.dirname(args[0])))
        return os.path.splitext(os.path.basename(fldr))[0].encode('utf-8')
    names = [get_name(args) for args in last_commands(20)]
    #print "Last commands: %s" % ', '.join(names)
    names = [n for n in names if n not in IGNORE]
    return names[-1] if len(names)>0 else None

def last_commands(n):
    with open(LAUNCH_LOG, 'r') as f:
        return [json.loads(line.replace('\n', '')) for line in f.readlines()[-n:]]


def recursive_file_gen(mydir):
    """Generator for all files recursively under 'mydir'"""
    for root, dirs, files in os.walk(mydir):
        for file in files:
            yield os.path.join(root, file)

def write_file(path, contents):
    with open(path,'w') as f:
        f.write(contents)

def read_file(path):
    with open(path,'r') as f:
        return f.read()

def clear_screen():
    print '\033[0;0H\033[2J'

def clip(str, l):
    return str if len(str)<=l else '%s...' % str[:l-3]


def arg(num, **kwargs):
    """Returns an argv value.  '1' is the first value after the command."""
    default_value = kwargs.get('default')
    prompt        = kwargs.get('prompt')
    error_string  = kwargs.get('error_string',
                               'Command is missing required argument #%s.' % num)
    if default_value:   prompt = '%s (%s)' % (prompt, default_value)
    if len(os.sys.argv)>num+1:
        return os.sys.argv[num+1]
    if 'prompt' in kwargs:
        value = raw_input(prompt+': ')
        if value.strip() != '':
            return value
    if 'default_value' in kwargs:
        return default_value
    error(error_string)

def yes_or_no(str, default=''):
    suffix = ' [Y/n]? ' if default=='y' else ' [y/N]? '
    return 'y' == (raw_input(str+suffix) or default).strip()[0:1].lower()

def prompt(prompt, default_value=''):
    dv =  ' (%s)' % default_value if default_value else ''
    val = raw_input(prompt+dv+': ')
    return val or default_value

def error(err_str):
    raw_input("\n\nERROR: %s\n\n(press RETURN to exit)" % err_str)
    os._exit(1)



########### FROM OBLIB

str1 = \
"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>URL</key>
        <string>%s</string>
    </dict>
</plist>
"""

def create_webloc(path, url):
    """Creates PATH.webloc that causes browswer to open URL when clicked"""
    with open('%s.webloc' % path, 'w') as f:
        f.write(str1 % (url,))



def get_finder_selection_path():
    """Returns the full path to the current selection within the Finder.
    NOTE: Implementation is a bit of a hack.  command-C is sent to the current currnet app
    and the clipboard is read."""
    send_keys('c', 'command down')
    return get_finder_path() + get_clipboard()

def get_finder_path():
    """Returns path to folder in the top finder window"""
    return osa_fn('tell application "Finder" to return POSIX path of ((folder of the front window) as text)')

def get_chrome_url():
    """Returns URL in top tab of chrome browser"""
    return osa_fn("tell application \"Google Chrome\" to get URL of active tab of first window")

def send_keys(keys, using=None):
    """Sends 'keys' with specified modifier key settings to the current application:
          shift down, control down, option down, command down"""
    using = "using %s" % using if using else ''
    osa("Tell Application \"System Events\" to keystroke \"%s\" %s" % (keys, using))

def send_key(keycode, using=''):
    """Send applescript key code to application
       Download  'key codes' from app store to get codes"""
    if using: using = 'using %s' % using
    osa("Tell Application \"System Events\" to key code %s %s" % (keycode, using))

# from  http://www.macdrifter.com/2011/12/python-and-the-mac-clipboard.html
def get_clipboard():
    p = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE)
    retcode = p.wait()
    data = p.stdout.read()
    return data

def set_clipboard(data):
    p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
    p.stdin.write(data)
    p.stdin.close()
    retcode = p.wait()


def get_app_in_focus():
    return osa_fn(
'global frontApp, frontAppName, windowTitle',
'set windowTitle to ""',
'tell application "System Events"',
'    set frontApp to first application process whose frontmost is true',
'    set frontAppName to name of frontApp',
'    tell process frontAppName',
'        tell (1st window whose value of attribute "AXMain" is true)',
'            set windowTitle to value of attribute "AXTitle"',
'        end tell',
'    end tell',
'end tell',
'do shell script "echo " & quoted form of frontAppName')
#'return< {frontAppName, windowTitle}')


# Executes multi-line applescript.  (cannot contain single quote (') character)
def osa(*lines):
    """Executes multi-line applescript script"""
    os.system("osascript %s" % ' '.join(["-e '%s'" % line for line in lines]))


# Runs apple script lines and captures output
def osa_fn(*lines):
    """Executes multi-line applescript script, and returns the captured output."""
    cmd = ['/usr/bin/osascript']
    for l in lines:        cmd.append('-e'); cmd.append(l)
    p = subprocess.Popen(cmd, bufsize=0, stdout=subprocess.PIPE, stderr = subprocess.PIPE)
    stdout,stderr = p.communicate()
    return stdout.rstrip()



main()
