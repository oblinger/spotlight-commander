#!/usr/bin/env python
# (C) Copyright 2014- Dan Oblinger  <code@oblinger.us>

import re
import os
import subprocess
import traceback
import textwrap
import time
import json

# create ~/templates  cmd -t --template (folder w. '=')  template  foo.templatename   or just templatename

# Use sym link for .icns file
# current_link should check if file is document or folder and set action
# -- fix EDITOR thing


RESCAN_ROOTS = ['/ob', '/Users/oblinger/Google Drive']
MARKER_FILE_TYPES = ['.org', '.md', '.gdoc']
MARKER_PREFIX = 'About '
MARKER_DEFAULT_EXTENSION = '.org'

TWO_STEP_FIX_RESET_TIME = 200                           # Reset time when the two step reset command revert's back to step 1
CREATE_JREFS = True                                     # Controls if 'rescan' will create j-prefix commands for each folder
HOME = os.getenv('HOME')
LAUNCH_LOG = '%s/.spot_cmdr_launchlog' % HOME
PARAMS_FILE = '%s/.spot_cmdr_params' % HOME
CMD_DIR = '%s/cmd' % HOME
TEMPLATES_DIR = '%s/templates' % HOME
EDITOR = os.getenv('EDITOR', 'open -e')
#EDITOR = '/Applications/TextMate.app/Contents/SharedSupport/Support/bin/mate'
APPLET_FOLDER = '/Applications/SpotlightCommander.app/Contents/MacOS'
PYTHON_LAUNCHER_PREFIX = "#!/usr/bin/env python %s/launcher --launch\n" % APPLET_FOLDER
KEY_REGEX = re.compile('^# ([^:]*):(.*)$')
WORD_REGEX = re.compile('^[a-z,A-Z,0-9,-_]*$')
ACTIONS = ['app', 'command', 'doc', 'folder', 'none', 'script', 'sh', 'url', 'nstr'] #, 'chrome']
SHORTCUTS = {'a':'about',    'b':'browser',  'c':'create',   'cp':'copy',          'e':'edit',
             'f':'finder',   'h':'help',     'ls':'list',    'mv':'move',    'nb':'named_browser', 'nf':'named_finder',
             'p':'print',    'rm':'remove',  's':'scan',     'v':'view',
             'x':'execute',  '?':'usage'}


USAGE = \
"""
    *     COMMAND
    b   --browser       name                captures current BROWSER url
    c   --create        dest name.template  CREATES 'name' in 'dest' folder using 'template'            ('=' for finder's folder as dest)
    cp  --copy          name newname        COPIES command to new name
        --dano                                   create's DANO commands
        --debug         name                DEBUGS the execution of named command
    e   --edit          name                EDIT
        --finder        name                captures current finder item
    f   --folder        dest name           Creates a new FOLDER and 'About ...' link under 'dest'      ('=' will use finder folder)
        --fix                               FIXES previous command
    h   --help                              Prints HELP (same as usage info)
        --install                           INSTALLS special commands
    ls  --list                              performs LS style list of commands
    mv  --move          name newname        MOVES command to new name
    n   --new  ????
    nb  --named-browser name
    nf  --named-finder  name
    p   --print         name                PRINTS the folder associated w. 'name'
        --rebuild                           scans all commands and REBUILDS them
        --scrub                             SCRUBS all 'doc' and 'folder' links (--dano and --rebuild will fix if 'About ...' links exist)
    rm  --remove        name                REMOVES command
    s   --scan          folder              SCAN folders looking for targets for missing commands  ('=' will use finder folder)
        --set           name type target    CREATE 'name' that links 'typed' 'target'
        --verify                            scans all commands and VERIFIES their targets are valid
    v   --view          name
    x   --execute       name                EXECUTES 'name'd command
    ?   --usage                             prints this USAGE message
        --set
        --scan                              SCANS filesystem looking for named files
        --test

        * NOTE: single or double character is a shortcut for the command to its right.



  CAP TYPES  (Command Application Types)
    app          launches 'target' application
    command      executed 'target' as a /bin/sh shell command line
    doc          opens 'target' as a DOCument
    folder       opens 'target' as a FOLDER
    none         no action taken
    script       executes entire 'applet' files as a script.
                 'target' specifies the 'python', 'ruby', or 'sh' interpreter
    url          opens 'target' as a URL using a web browser
    nstr         opens name in notester

  CAP PARAMETERS
    action       cap type (see list above)
    target       filepath, url, etc.
    io           console, pinned
    prompt       string used to prompt user  (will be appended to target or replace '%s' within target)

"""


INFO_PLIST_BODY = \
"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleAllowMixedLocalizations</key>
	<true/>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>applet</string>
	<key>CFBundleIconFile</key>
	<string>applet</string>
	<key>CFBundleIdentifier</key>
	<string>com.apple.ScriptEditor.id.jdata7</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>jdata7</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>aplt</string>
	<key>LSMinimumSystemVersionByArchitecture</key>
	<dict>
		<key>x86_64</key>
		<string>10.6</string>
	</dict>
	<key>LSRequiresCarbon</key>
	<true/>
	<key>WindowState</key>
	<dict>
		<key>bundleDividerCollapsed</key>
		<true/>
		<key>bundlePositionOfDivider</key>
		<real>0</real>
		<key>dividerCollapsed</key>
		<false/>
		<key>eventLogLevel</key>
		<integer>2</integer>
		<key>name</key>
		<string>ScriptWindowState</string>
		<key>positionOfDivider</key>
		<real>389</real>
		<key>savedFrame</key>
		<string>50 32 700 640 0 0 1152 697 </string>
		<key>selectedTab</key>
		<string>description</string>
	</dict>
</dict>
</plist>
"""



DANO_FOLDERS = """
TARGET: /ob
TARGET: /ob/cmd
TARGET: /ob/data
TARGET: /ob/gdrive
TARGET: /ob/logs
TARGET: /ob/proj
TARGET: /ob/topics
#TARGET: /ob/data/config
TARGET: /ob/data/disks
TARGET: /ob/data/install
#TARGET: /ob/iTerm
TARGET: /ob/data/mail
TARGET: /ob/data/music-tiny
TARGET: /ob/data/MyDesk
TARGET: /ob/data/Scratch
TARGET: /ob/data/wallpapers
TARGET: /ob/proj/bin
#TARGET: /ob/proj/MyNDA
TARGET: /ob/data/MyDesk
TARGET: /ob/data/Scratch
TARGET: /ob/data/sensitive_S1S2.dmg, Sensitive, app

TARGET: /ob/logs/_archive_bin,  ArchBin
TARGET: /ob/logs/_archive_proj, ArchProj
TARGET: /ob/logs/_archive_ref,  ArchRef
TARGET: /ob/logs/_archive_WP,   ArchWP
TARGET: /ob/logs/_archive_misc, ArchMisc
TARGET: /ob/logs/Bought
TARGET: /ob/logs/External
TARGET: /ob/logs/Humor
TARGET: /ob/logs/Ideas
TARGET: /ob/logs/Letters
TARGET: /ob/logs/ToBuy
TARGET: /ob/logs/ToRead
TARGET: /ob/logs/WP

TARGET: /ob-large
TARGET: /ob-large/_MUSIC_, Music
TARGET: /ob-large/_PHOTOS_, Photos
TARGET: /ob-large/install
TARGET: /ob-large/ToFile
TARGET: /ob-large/ToTrash

TARGET: /, Root
TARGET: /Applications
TARGET: /Users/oblinger
TARGET: /Users/oblinger/Downloads
TARGET: /Users/oblinger/Dropbox
TARGET: /Users/oblinger/templates
TARGET: /Users/oblinger/Google Drive, Gdrive
TARGET: /Volumes/sensitive
TARGET: /Volumes/stub

TARGET: Social, Social, nstr
TARGET: AAII, AAII, nstr
TARGET: AK, AK, nstr
TARGET: Active, Active, nstr
TARGET: Activities, Activities, nstr
TARGET: Actualize, Actualize, nstr
TARGET: Addresses, Addresses, nstr
TARGET: Annual, Annual, nstr
TARGET: Art, Art, nstr
TARGET: Ascii, Ascii, nstr
TARGET: AtHome, AtHome, nstr
TARGET: AtWork, AtWork, nstr
TARGET: BKT, BKT, nstr
TARGET: BList, BList, nstr
TARGET: Bg, Bg, nstr
TARGET: Bills, BillsNstr, nstr
TARGET: Bio, Bio, nstr
TARGET: Blogger, Blogger, nstr
TARGET: Books, Books, nstr
TARGET: Brain2, Brain2, nstr
TARGET: Budget, Budget, nstr
TARGET: Camping, Camping, nstr
TARGET: Clothes, Clothes, nstr
TARGET: Colors, Colors, nstr
TARGET: CommadoCooking, CommadoCooking, nstr
TARGET: Comp, Comp, nstr
TARGET: CrockCooking, CrockCooking, nstr
TARGET: DELEGATE, DELEGATE, nstr
TARGET: DansCategories, DansCategories, nstr
TARGET: Dinner, Dinner, nstr
TARGET: Do, Do, nstr
TARGET: Events, Events, nstr
TARGET: Fin, Fin, nstr
TARGET: Gadgets, Gadgets, nstr
TARGET: Genre, Genre, nstr
TARGET: Habits, Habits, nstr
TARGET: Hack, Hack, nstr
TARGET: Health, Health, nstr
TARGET: Home, Home, nstr
TARGET: HouseStuff, HouseStuff, nstr
TARGET: Lang, Lang, nstr
TARGET: LifePlanning, LifePlanning, nstr
TARGET: Magizines, Magizines, nstr
TARGET: Me, Me, nstr
TARGET: Medical, Medical, nstr
TARGET: My, My, nstr
TARGET: Myfo, Myfo, nstr
TARGET: Notester, Notester, nstr
TARGET: OPPORTUNE, OPPORTUNE, nstr
TARGET: Oblio, Oblio, nstr
TARGET: Org, Org, nstr
TARGET: Prime, Prime, nstr
TARGET: Priorities, Priorities, nstr
TARGET: Repeat, Repeat, nstr
TARGET: Role, Role, nstr
TARGET: Verify, Verify, nstr
TARGET: Week, Week, nstr
TARGET: Work, Work, nstr
TARGET: eCards, eCards, nstr

"""


def main():
    if not os.path.exists('%s/ctrl' % APPLET_FOLDER):
        print "Copy the app into the /Applications folder and re-run."
        error("Application must run from the /Applications folder.")
    argv = os.sys.argv
    #argv = ['', 'two_step_fix']
    if len(argv)<2:
        cmd_install(reinstall=False)
        argv= ['cmd'] + raw_input('CMD> ').split()
        if len(argv)<=1:
            os.sys.exit(0)
    a1 = argv[1] if len(argv)>1 else ''

    if a1[0:2]=='--':     base = a1[2:]
    elif a1[0:1]=='-':    base = a1[1:]
    else: base = a1
    base = SHORTCUTS.get(base) or base
    base = base.lower().replace('-', '_')
    try:   fn=globals()['cmd_%s' % base]     # Try calling the appropriate 'cmd_...' function
    except KeyError:
        print "ERROR:  Unknown command '%s'" % a1
        return
    fn()




################################################################################
###  COMMANDS


def cmd_about():
    folder = arg(1, default=None) or get_finder_path()
    file = '%s/%s%s%s' % (folder, MARKER_PREFIX, os.path.basename(folder), MARKER_DEFAULT_EXTENSION)
    with open(file, 'w') as f:
        pass
    cmd_scan(file)



def cmd_browser(name=None):
    """Import doc link from BROWSER."""
    name = name or arg(1, prompt='Enter name for URL link')
    if not name: error('No name specified.')
    url = get_chrome_url()
    cap_set({NAME:name, ACTION:'url', TARGET:url})


def cmd_copy():
    name    = arg(1, prompt='Enter name of command to copy')
    newname = arg(2, prompt='Enter new destination name for copy')
    cap  = cap_get_by_name(name)
    print '### Copying %r to %r' % (name, newname)
    cap[NAME] = newname
    cap_set(cap)


def cmd_create():
    dest_folder = arg(1, prompt='Enter destination folder')
    if dest_folder=='=':
        dest_folder = get_finder_path()
    #pattern = user_input('Enter name.template to create file from template')
    pattern = arg(2, prompt='Enter name.template to create file from template')
    parts = pattern.split('.')
    if len(parts)>1:
        f_name,t_name = parts[0],parts[1]
    else:
        f_name, t_name = 'blank',parts[0]
    for suffix in os.listdir(TEMPLATES_DIR):
        if suffix.lower().startswith(t_name+'.'):
            dest = '%s%s' % (f_name, os.path.splitext(suffix)[1])
            os.system('cp "%s/%s" "%s"' % (TEMPLATES_DIR, suffix, dest_folder))
            os.system('cd "%s" ; mv "%s" "%s"' % (dest_folder, os.path.basename(suffix), dest))
            return
    error('Could not find template named %r' % t_name)


def cmd_dano(lines=DANO_FOLDERS):
    z=lines.split('\n')
    print "RECREATING STANDARD FOLDER LINKS"
    for line in lines.split('\n'):
        if line.startswith('TARGET: '):
            parts = [p.strip() for p in line[8:].split(',')]
            target = parts[0]
            if target[0]=='.':                                          # USE CWD TO EXPAND RELATIVE PATHS
                target = os.path.join(os.getcwd(), target[2:])
            name = parts[1] if len(parts)>1 else os.path.splitext(os.path.basename(parts[0]))[0]
            name = '%s%s' % (name[0].capitalize(), name[1:])
            action = parts[2] if len(parts)>2 else 'folder' if target[0] in ['.', '/'] else None
            if action:
                cap_set(dict(name=name, target=target, action=action), verbose=True)
            if action=='folder':
                cap_set(dict(name='j%s' % name, target=target, action=action), verbose=True)


def cmd_debug():
    prefix = arg(1, prompt='Enter name to edit')
    path = cap_path( cap_get_by_name(prefix) )
    print("### Debugging execution of CAP command %r" % path)
    os.system('/usr/bin/env python %s/launcher --debug --launch %s/Contents/MacOS/applet' % (APPLET_FOLDER, path))


# Bug:  'clean_file' may not run after edit, then file is permanently broken since it cannot cap_find_one
def cmd_edit():
    """Edits the specified command."""
    prefix = arg(1, prompt='Enter name to edit', default=None)
    if not prefix:
        return
    path = cap_find_one(prefix) + '/Contents/MacOS/applet'
    #clean_file(path)
    line='%s "%s"' % (EDITOR, path)
    print " $ %s" % line
    os.system('echo ED $EDITOR')
    os.system(line)
    #clean_file(path)
def clean_file(path):
    original = read_file(path)
    contents = original.replace('\xe2', "'")
    contents = contents.replace('\x80', "")
    contents = contents.replace('\x98', "")
    contents = contents.replace('\x99', "")
    contents = contents.encode('ascii', 'ignore')
    if original!=contents:
        write_file(path, contents)
# def clean_file(path):
#     os.system('iconv -f iso-8859-1 -t utf-8 < "%s" > "%s.txt"' % (path, path))


def cmd_finder(name=None):
    """Import doc link from FINDER."""
    target_folder =  get_finder_path()
    target_file = get_clipboard()
    target = target_folder+'/'+target_file
    name = name or os.path.splitext(target_file)[0]
    if not os.path.exists(target):
        error("Could not find file '%s'" % target)
    print "NAME:%s   TARGET:%s   DIR:%s  FILE:%s" % (name, target, target_folder, target_file)
    cap_set({NAME:name, ACTION:'doc', TARGET:target})
    cap_set({NAME:'J'+name, ACTION:'folder', TARGET:target_folder})


def cmd_fix(name=None):
    cap       = get_current_link_while_in_console()
    cap[NAME] = name or last_command_name()
    print "FIX THE %r COMMAND" % cap[NAME].upper()
    print "- PRESS RETURN to accept new target below"
    print "- PASTE a url or path to fix to a different target"
    print "- ADD 'nnn=' to change the NAME of the command being updated"
    print "- USE 'nnn=aaa tttt' to specify everything: the NAME, ACTION, and TARGET"
    print ""
    print "NEW TARGET: %r %s" % (cap[ACTION], cap[TARGET])
    input = user_input('SET %r [Y/n]' % cap[NAME])
    if input=='n':
        return
    if '=' in input:                    # Handle '=' prefix
        idx = input.index('=')
        cap[NAME]=input[:idx].strip()
        input = input[idx+1:].strip()
    word = input[0:input.index(' ')].lower() if ' ' in input else None
    if word and word in ACTIONS:        # Handle action prefix
        cap[ACTION] = word
        input = input[len(word):].lstrip()
    else:
        cap[ACTION] = infer_action(input, error=False)
    if input!='' and input!='y':
        cap[TARGET]=input
    if cap.get(ACTION):
        print("CMD: %s" % cap_to_str(cap))
        cap_set(cap, verbose=True)


def cmd_folder():
    folder = arg(1, prompt='Enter destination folder')
    if folder=='=':
        folder = get_finder_path()
    name   = arg(2, prompt='Enter folder name to create under %r' % folder)
    new_folder = os.path.join(folder, name)
    new_about  = "%s/%s%s%s" % (new_folder, MARKER_PREFIX, name, MARKER_DEFAULT_EXTENSION)
    print "### CREATING %s" % new_about
    if not os.path.exists(new_folder):
        os.makedirs(new_folder)
    os.system('touch "%s"' % (new_about,))
    cmd_scan(new_about)


def cmd_help():
    cmd_usage()


def cmd_last():
    cap = get_current_link()
    p   = params()
    cap[NAME] = name = p.get('fix_command')
    print "params %r" % p
    if name and time.time()-p['time']<60:
        cap_set(cap, verbose=True)
        cmd_execute(name)


def cmd_install(reinstall=True):
    if not reinstall and os.path.exists(CMD_DIR):
        return
    print '\nCREATING SPOTLIGHT-COMMANDER COMMANDS\n'
    script = '%s/ctrl' % APPLET_FOLDER
    if not os.path.exists(CMD_DIR):
        print 'Creating folder %r' % CMD_DIR
        os.makedirs(CMD_DIR)

    cap_set({NAME:'CREATE',  ACTION:'command', TARGET:'%s create =' % script,               PROMPT: 'CREATE. Enter "name.template"'},    verbose=True)
    cap_set({NAME:'FIX',     ACTION:'command', TARGET:'%s fix'      % script, IO: 'pinned'},  verbose=True)
    cap_set({NAME:'FOLDER',  ACTION:'command', TARGET:'%s folder =' % script, IO: 'pinned'},  verbose=True)
    cap_set({NAME:'ABOUT',   ACTION:'command', TARGET:'%s about'    % script},                verbose=True)
    cap_set({NAME:'SCAN',    ACTION:'command', TARGET:'%s scan ='   % script, IO: 'pinned'},  verbose=True)

    cap_set({NAME:'cmdCOPY', ACTION:'command', TARGET:'%s cp %%s' % script, IO: 'pinned',   PROMPT: 'CMD COPY.  Enter source & dest: '}, verbose=True)
    cap_set({NAME:'cmdEDIT', ACTION:'command', TARGET:'%s -e %%s' % script, IO: 'pinned',   PROMPT: 'Launcher Edit: '}, verbose=True)
    cap_set({NAME:'cmdLS',   ACTION:'command', TARGET:'%s ls'     % script, IO: 'pinned'},  verbose=True)
    cap_set({NAME:'cmdMV',   ACTION:'command', TARGET:'%s mv %%s' % script, IO: 'pinned',   PROMPT: 'CMD MOVE.  Enter source & dest: '}, verbose=True)
    cap_set({NAME:'cmdRM',   ACTION:'command', TARGET:'%s rm %%s' % script, IO: 'pinned',   PROMPT: 'CMD REMOVE.  Enter name: '}, verbose=True)

    # cap_set({NAME:'ll',       ACTION:'command', TARGET:'%s'        % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'llb',      ACTION:'command', TARGET:'%s -b'     % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'llc',      ACTION:'command', TARGET:'%s -c'     % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'llf',      ACTION:'command', TARGET:'%s -f'     % script},                verbose=True)
    # cap_set({NAME:'llnb',     ACTION:'command', TARGET:'%s -nb'    % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'llnf',     ACTION:'command', TARGET:'%s -nf'    % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'llv',      ACTION:'command', TARGET:'%s -v'     % script, IO: 'pinned'},  verbose=True)
    #
    # cap_set({NAME:'COPY', ACTION:'command', TARGET:'%s copy'   % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'LAST', ACTION:'command', TARGET:'%s last'   % script},                verbose=True)
    # cap_set({NAME:'NEW',  ACTION:'command', TARGET:'%s new'    % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'SET',  ACTION:'command', TARGET:'%s set'    % script, IO: 'console'}, verbose=True)
    # cap_set({NAME:'TWO_STEP_FIX',  ACTION:'command', TARGET:'%s two_step_fix' % script}, verbose=True)
    # cap_set({NAME:'ss',   ACTION:'command', TARGET:'%s ss'     % script, IO: 'console'}, verbose=True)


def cmd_list():
    prefix = arg(1, default='')
    names = [cap_get(path)[NAME].ljust(18) for path in cap_find_all(prefix)]
    print 'COMMANDS:\n%s\n\n' % textwrap.fill('  '.join(names),80)


def cmd_move():
    name    = arg(1, prompt='Enter name of command to move')
    newname = arg(2, prompt='Enter new destination name for move')
    cap  = cap_get_by_name(name)
    print '### Moving %r to %r' % (name, newname)
    cap_delete(cap)
    cap[NAME] = newname
    cap_set(cap)


def cmd_named_browser():
    """Prompts user for name for link to URL in the top Chrome tab"""
    cmd_browser(user_input('Enter name for link to current Chrome URL'))


def cmd_named_finder():
    """Prompts user for name for link to document selected in finder"""
    cmd_finder(user_input('Enter name for link to file selected & clipboarded in Finder'))


def cmd_print():
    """Prints folder associated with the specified command."""
    prefix = arg(1)
    cap = cap_get_by_name(prefix)
    if cap[ACTION] not in ['doc', 'folder', 'app']:
        error("Command type %r does not have an associated folder." % cap[ACTION])
    path = cap[TARGET]
    if os.path.splitext(path)[1]!='':
        path = os.path.dirname(path)
    print path


def cmd_rebuild():
    folder = CMD_DIR
    a1 = arg(1, default_value=None)
    suffix = ' starting with %r' % a1 if a1 else ''
    if 'y'!=user_input('press "y" to REBUILD each CAPs under %s%s' % (folder, suffix)):
        return
    for cap in cap_get_all(folder):
        if not a1 or cap[NAME].lower().startswith(a1.lower()):
            cap_delete(cap)  # ensures that command's case is not derived from the old cap.app
            cap_set(cap)


def cmd_remove():
    i=1
    while True:
        name = arg(i,default=None)
        if not name and i==1:
            name = arg(1, prompt='Enter name of command to remove')
        if not name:
            break
        path  =  cap_find_one(name, require_valid_cap=False)               # Would be nice to trap error
        print '### Deleting CAP "%s"' % path
        os.system('rm -r "%s"' % path)
        i+=1


def cmd_scan(*roots):
    arg1 = arg(1, default=None)
    if len(roots)!=0:
        pass
    elif arg1==None:
        roots = RESCAN_ROOTS
    elif arg1=='=':
        roots = [get_finder_path()]
    else:
        roots = [arg1]
    print "### SCANNING FOLDERS UNDER, %s, FOR 'About ...' TARGETS" % ', '.join(roots)
    for root in roots:
        if is_cmd_marker_file(root):
            update_cmds_for_about_target(root)
        else:
            for f in recursive_file_gen(root):
                update_cmds_for_about_target(f)


def cmd_scrub():
    if 'y'!=raw_input("### PRESS 'y' RETURN TO REMOVE AND REBUILD ALL 'DOC' and 'FOLDER' COMMANDS: "):
        return
    for f in cap_find_all(''):
        cap = cap_get(f)
        if cap[ACTION] in ['doc', 'folder']:
            print "### DELETING %s --> %s" % (cap[NAME], cap[TARGET])
            cap_delete(cap)
    print;
    cmd_dano()
    print;
    cmd_scan()


def cmd_set():
    """Sets a cmd based on name action and target"""
    name   = arg(1, prompt='Name of cap to create', error_string='Name required.')
    action = arg(2, prompt='Cap action (%s)' % ', '.join(ACTIONS), error_string='Action required.')
    target = arg(3, prompt='Cap target', error_string='Target required')
    keys = {FOLDER:CMD_DIR, NAME:name, ACTION:action, TARGET:target}
    cap_set(keys)


# BUG what about when there is no last command or curr cap???
def cmd_ss(**kwargs):
    ask = kwargs.get('ask', True)
    cur_cap   = get_current_link_while_in_console()
    name = last_command_name()
    last_cap  = name and cap_get_by_name(name+'.')
    cmd       = 'c' # value used if not 'ask'
    if ask:
        print "SET COMMAND\n"
        name = user_input('Set command named', name)
        print "Type 'c' or 'p' to assign CURRENT WINDOW, or PREVIOUS COMMAND to '%s'" % name
        print "Or type  'url', 'doc', 'folder' then paste any other target URL or path"
        print
        print "  Current:  %s" % cap_desc(cur_cap)
        if last_cap:  print "  Previous: %s" % cap_desc(last_cap)
        print
        cmd = user_input('Set %r as' % name)
    if cmd == 'p':
        cap = last_cap
    elif cmd == 'c':
        cap = cur_cap
    elif cmd.strip() == '':
        return
    else:
        cap = {NAME:name}
        idx = cmd.index(' ')
        cap[ACTION]=cmd[:idx].strip()
        cap[TARGET]=cmd[idx:].strip()
        if cap[ACTION] not in ACTIONS:
            error("Command link to a known action: %s" % ACTIONS)
    cap[NAME]=name
    cap_set(cap)
    clear_screen()
    print '\nSUCCESS.\n\nCommand "%s" now set to %s\n' % (cap[NAME], cap_desc(cap))
    default = 'n' if cmd=='c' and cap[ACTION] not in ['doc', 'folder'] else 'y'
    if not ask or yes_or_no('Launch command now', default):
        cmd_execute(cap[NAME])


def cmd_test():
    send_key(48, 'command down')


def cmd_test_scan(folder=CMD_DIR+'/old'):
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        keys = cap_get(path)
        if not keys:
            print "Ignoring %s" % path
            continue
        if keys[ACTION] not in ['doc', 'folder', 'url', 'app']:  print cap_to_str(keys)


def cmd_two_step_fix():
    now=int(time.time())
    keys=params()
    if now-keys.get('fix_time', 0)<TWO_STEP_FIX_RESET_TIME:
        print 'TWO -- Fix the captured command'
        params(fix_time=0)
        os.system('%s/ctrl -x fix' % (APPLET_FOLDER,))
        #cmd_fix(keys['fix_command'])
    else:
        print 'ONE -- Capture command'
        time.sleep(4.0)
        send_keys('a', 'command down')
        time.sleep(1)
        send_keys('c', 'command down')
        time.sleep(1)
        send_key(53)
        time.sleep(1)
        send_key(53)
        time.sleep(1)
        name = get_clipboard()
        if len(name)>2 and len(name)<20 and re.match(WORD_REGEX, name):
            params(fix_time=now, fix_command=name)


def cmd_usage():
    print USAGE
    os.sys.stdout.write('HIT RETURN TO EXIT')
    raw_input()


def cmd_verify():
    out = '/tmp/removal_script'
    folder = CMD_DIR
    with open(out, 'w') as f:
        for cap in cap_get_all(folder):
            if cap[ACTION] in ['app', 'doc', 'folder']:
                if not os.path.exists(cap[TARGET]):
                    f.write('ll --rm "%s"\n' % cap[NAME])
                    print "### ERROR in %r.  Target missing: %s" % (cap[NAME], cap[TARGET])
    print '\nNOTE:  See %r for script file to remove all commands with missing targets' % out


def cmd_view():
    last = last_command_name()
    name = arg(1, prompt='Enter name of command to view', default=last)
    for cap_file in cap_find_all(name):
        cap = cap_get(cap_file)
        if cap:
            print 'COMMAND %s' % cap_to_str(cap)


def cmd_execute(name=None):
    name = name or arg(1, prompt='Enter name of command to execute')
    path = cap_find_one(name)
    os.system('open "%s"' % path)





################################################################################
###  CAP OPERATORS
###
###
### STANDARD KEYS IN A COMMAND APP FILE AND IN A 'CAP' MAP
FOLDER  = 'folder'   # REQ  the folder where this command resides
NAME    = 'name'     # REQ  the name of this cap  (it folder name with the .app removed)
TYPE    = 'type'     # REQ  'scpt' 'app' 'webloc'
ACTION  = 'action'   # REQ  'doc' 'folder' 'url'
TARGET  = 'target'   # REQ
PROMPT  = 'prompt'   # opt  Causes user input (which updates the 'arg' var)
ARG     = 'arg'      # opt  Appended as arg for script & shell commands (usually set via 'prompt')
BODY    = 'body'     # opt  List of text lines after the last key value pair
IO      = 'io'       # opt  non-null means that command should execute within a console window



def cap_get(path):
    """returns map of standard info plus the key value pairs from a cmd app."""
    try:
        name_ext = os.path.basename(path)
        name     = os.path.splitext(name_ext)[0]
        keys = {FOLDER:os.path.dirname(path), NAME:name}

        if os.path.isfile(path) and os.path.splitext(path)[1]=='.webloc':
            keys[TYPE]='webloc'
            with open(path, 'r') as f:
                lines = f.readlines()
            if not lines[5].startswith('        <string>') or not lines[5].endswith('</string>\n'):
                print lines
                print 'WARNING:  Could not read cap %r' % path
                return None
            target = lines[5][16:-10]
            keys[ACTION]='url'
            keys[TARGET]=target
            return keys

        if os.path.isfile(path) and os.path.splitext(path)[1]=='.scpt':
            keys[TYPE]='scpt'
            with open(path, 'r') as f:
                for line in f.readlines():
                    idx = line.find(':')
                    if idx!=-1 and line.startswith('# '):
                        k = line[2:idx].strip()
                        v = line[idx+1:].strip()
                        keys[k]=v
            return keys

        if os.path.isdir(path) and os.path.splitext(path)[1]=='.app':
            body = []
            keys[TYPE]='app'
            with open('%s/Contents/MacOS/applet' % path, 'r') as f:
                for line in f.readlines():
                    body.append(line[:-1] if line[-1:]=='\n' else line)
                    result = re.search(KEY_REGEX, line)
                    if result:
                        body = []
                        keys[result.group(1).strip()] = result.group(2).strip()
            #if body[:1]==['']: body = body[1:]
            if body[-1:]==['\n']:  body = body[:-1]
            if len(body)!=0:  keys[BODY]=body
            if keys.get(ACTION) not in ACTIONS:
                print('WARNING: Illegal action %r in %s' % (keys.get(ACTION), keys.get(NAME)))
            return keys
    except:
        print "WARNING: Failure caught during parse of command config file: %r" % path
        print traceback.format_exc()
        return None
    return None

def cap_get_by_name(prefix, **kwargs):
    """Like cap_get but uses 'prefix' to find cap file.  see 'cap_find_one' for kwargs."""
    cap_file = cap_find_one(prefix, **kwargs)
    return cap_get(cap_file) if cap_file else None

def cap_find_one(prefix, **kwargs):
    folder=kwargs.get('folder', CMD_DIR)
    require_valid_cap=kwargs.get('require_valid_cap', True)
    default = kwargs.get('default')
    paths = cap_find_all(prefix, folder, require_valid_cap)
    if len(paths)>1:
        paths2 = cap_find_all(prefix+'.', folder, require_valid_cap)   # try looking for a case insensitive exact match
        if len(paths2)==1: paths = paths2
    if len(paths)!=1 and 'default' in kwargs:
        return default
    if len(paths)==0:
        error('Command App starting with "%s..." not found under %s' % (prefix, folder))
    if len(paths)>1:
        error('Required exactly one matching command for %s, but found %s' %
              (prefix, ', '.join(['/%s/' % os.path.basename(p) for p in paths])))
    return paths[0]

def cap_find_all(prefix, folder=CMD_DIR, require_valid_cap=True):
    """Returns list of paths to matching cap files.
    if 'only_one' then only one cap path is returned, and an error is generated
    if more or fewer than one cap is found."""
    prefix = prefix.lower()
    paths = []
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        if name.lower().startswith(prefix) and (not require_valid_cap or cap_get(path)):
            paths.append(path)
    return paths

def cap_set(cap, **kwargs):
    verbose = kwargs.get('verbose', True)
    if verbose: print "### Creating Cmd '%s' as a '%s' launcher for '%s'" % (cap[NAME], cap[ACTION], cap[TARGET])
    if not FOLDER in cap:  cap[FOLDER]=CMD_DIR
    if cap[ACTION] not in ACTIONS:
        error('Action %r must be one of: %s' % (cap[ACTION], ', '.join(ACTIONS)))
    cap_delete(cap)
    path = cap_path(cap)
    if not os.path.exists(path):
        os.makedirs('%s/Contents/MacOS' % path)
    write_file('%s/Contents/PkgInfo' % path, 'APPLaplt')
    write_file('%s/Contents/Info.plist' % path, INFO_PLIST_BODY)
    excludes   = ['prompt', 'action', 'target', 'type', 'path', 'body', 'folder', 'name'] # 'docstr', 'source'
    fixed_keys = '# action: %s\n# target: %s' % (cap['action'], cap.get('target'))
    if 'prompt' in cap: fixed_keys = '# prompt: %s\n%s' % (cap['prompt'], fixed_keys)
    other_keys = '\n'.join(['# %s: %s' % (k, v) for k,v in cap.items() if k not in excludes])
    contents = '%s\n%s\n%s\n' % (PYTHON_LAUNCHER_PREFIX, fixed_keys, other_keys)
    if BODY in cap:  contents = '%s%s\n' % (contents, '\n'.join(cap[BODY]))
    app_path = '%s/Contents/MacOS/applet' % path
    write_file(app_path, contents)
    os.system('chmod 755 "%s"' % app_path)
    os.system('mkdir "%s/Contents/Resources"' % path)
    os.system('cp "%s/../Resources/applet.icns" "%s/Contents/Resources"' % (APPLET_FOLDER, path))
    cap_set_jcap(cap, verbose)

def cap_set_jcap(cap, verbose):
    """adds the shadow 'j...' command each time the main command is updated."""
    if cap[ACTION] != 'doc' or not CREATE_JREFS:
        return
    folder = os.path.dirname(cap[TARGET])
    jname = cap[NAME]
    jname = 'j%s' % (jname[1:] if jname[0]=='a' else jname)
    if verbose:
        print '### FOLDER link: %r to %r' % (jname, folder)
    cap_set({NAME:jname, ACTION:'folder', TARGET:folder}, verbose=False)


def cap_delete(cap):
    """Deletes a cap entry."""
    path = cap_path(cap)
    if os.path.exists(path):
        os.system('rm -r "%s"' % path)

def cap_get_all(folder):
    """Returns list of all cap maps for each cap under 'folder'"""
    cap_maps = []
    for name in os.listdir(folder):
        path = '%s/%s' % (folder, name)
        cap = cap_get(path)
        if cap:   cap_maps.append(cap)
    return cap_maps

def cap_path(cap):
    """Returns fullpath for cap"""
    return '%s/%s.app' % (cap[FOLDER], cap[NAME])

def cap_to_str(cap):
    """Returns string summary of a cap's parameters."""
    return 'N: %s  A: %s  T: %s' % (cap[NAME].ljust(25), cap[ACTION].ljust(10), cap[TARGET])

DESC_FORMATS = {'doc':'open document %r', 'folder': 'open folder %r', 'app':'launch app %r'}

def cap_desc(cap, max_len=74):
    a = cap[ACTION]
    desc = DESC_FORMATS.get(a,'launch %s %%r' % a) % cap[TARGET]
    return clip(desc, max_len)







###############################################################################
###   SUPPORT FUNCTIONS


def is_cmd_marker_file(f):
    folder = os.path.dirname(f)
    parent = os.path.basename(folder)
    parts   = os.path.splitext(os.path.basename(f))
    return parts[0].startswith(MARKER_PREFIX) or \
           (parts[0].lower()== parent.lower() and parts[1] in MARKER_FILE_TYPES)


def update_cmds_for_about_target(f):
    if not is_cmd_marker_file(f):                                           # EXIT if file is not a cmd marker
        return
    folder = os.path.dirname(f)
    name = os.path.splitext(os.path.basename(f))[0]
    if name.startswith(MARKER_PREFIX): name = name[len(MARKER_PREFIX):]
    name = '%s%s' % (name[0].capitalize(), name[1:])

    ## SCAN FOR AND ADD BASE CMD LINK
    targets = []
    for suffix in os.listdir(folder):
        if os.path.splitext(suffix)[0].lower() == name.lower():
            targets.append(os.path.join(folder, suffix))
    if len(targets)==1:
        cap = dict(action='doc', name=name, target=targets[0])
        cap_set(cap, verbose=True)

    ## ADD 'aXxxx' cmd for 'About ...' files
    if os.path.basename(f).startswith(MARKER_PREFIX):
        a_cap = dict(action='doc', name='a%s' % name, target=f)
        cap_set(a_cap, verbose=True)



def infer_action(target, **kwargs):
    err = kwargs.get('error', True)
    if '://' in target:
        return 'url'
    if target.startswith('/'):
        if os.path.isdir(target):
            return 'folder'
        if os.path.isfile(target):
            return 'doc'
        if err:
            error('Target file %r does not exist' % target)
    if err:
        error('Use full url/path.  Cannot tell if target is a file, folder, or URL.')
    return None

params_cache = None
def params(**updates):
    """Get/Set persistent parameters.  Accepts updates, returns current map of params"""
    global params_cache
    if not params_cache:
        try:
            with open(PARAMS_FILE, 'r') as f:
                params_cache = json.loads(f.read())
        except Exception:
            params_cache = {}
    if updates:
        params_cache.update(updates)
        with open(PARAMS_FILE, 'w') as out:
            out.write(json.dumps(params_cache)+'\n')
    return params_cache


def get_current_link_while_in_console():
    send_key(48, 'command down')
    #time.sleep(0.2)
    cur_cap = get_current_link()
    send_key(48, 'command down')
    return cur_cap

def get_current_link():
    cap = {}
    current_app = get_app_in_focus()
    with open('/tmp/tmp', 'w') as f: f.write('cur app %r ' % current_app)
    if current_app=='Google Chrome':
        cap[TARGET] = get_chrome_url()
        cap[ACTION] = 'url'
    elif current_app=='Finder':
        cap[TARGET] = get_finder_selection_path()
        cap[ACTION] =  infer_action(cap[TARGET])
    elif current_app=='':
        cap[TARGET] = 'none'
        cap[ACTION] = 'none'
    else:
        cap[ACTION] = 'app'
        cap[TARGET] = current_app
    return cap

def last_command_name():
    """Returns the last launched command that is not in the ignore list."""
    IGNORE = ['ss', 'ss1', 'fix']
    def get_name(args):
        fldr = os.path.dirname(os.path.dirname(os.path.dirname(args[0])))
        return os.path.splitext(os.path.basename(fldr))[0].encode('utf-8')
    names = [get_name(args) for args in last_commands(20)]
    #print "Last commands: %s" % ', '.join(names)
    names = [n for n in names if n.lower() not in IGNORE]
    return names[-1] if len(names)>0 else None

def last_commands(n):
    try:
        with open(LAUNCH_LOG, 'r') as f:
            return [json.loads(line.replace('\n', '')) for line in f.readlines()[-n:]]
    except Exception:
        return []


def recursive_file_gen(mydir):
    """Generator for all files recursively under 'mydir'"""
    for root, dirs, files in os.walk(mydir):
        for file in files:
            yield os.path.join(root, file)

def write_file(path, contents):
    with open(path,'w') as f:
        f.write(contents)

def read_file(path):
    with open(path,'r') as f:
        return f.read()

def clear_screen():
    print '\033[0;0H\033[2J'

def clip(str, l):
    return str if len(str)<=l else '%s...' % str[:l-3]


def arg(num, **kwargs):
    """Returns an argv value.  '1' is the first value after the command."""
    default_value = kwargs.get('default')
    prompt        = kwargs.get('prompt')
    error_string  = kwargs.get('error_string',
                               'Command is missing required argument #%s.' % num)
    if default_value:   prompt = '%s (%s)' % (prompt, default_value)
    if len(os.sys.argv)>num+1:
        return os.sys.argv[num+1]
    if 'prompt' in kwargs:
        value = raw_input(prompt+': ')
        if value.strip() != '':
            return value
    if 'default' in kwargs:
        return default_value
    error(error_string)

def yes_or_no(str, default=''):
    suffix = ' [Y/n]? ' if default=='y' else ' [y/N]? '
    return 'y' == (raw_input(str+suffix) or default).strip()[0:1].lower()

def user_input(prompt, default_value=''):
    dv =  ' (%s)' % default_value if default_value else ''
    val = raw_input(prompt+dv+': ')
    return val or default_value

def user_input_no_console(prompt, default_value=''):
    return system_to_str('%s/launcher'% (APPLET_FOLDER,), '--prompt', prompt)

def error(err_str):
    raw_input("\n\nERROR: %s\n\n(press RETURN to exit)" % err_str)
    os.sys.exit(1)



########### FROM OBLIB

str1 = \
"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>URL</key>
        <string>%s</string>
    </dict>
</plist>
"""

def create_webloc(path, url):
    """Creates PATH.webloc that causes browswer to open URL when clicked"""
    with open('%s.webloc' % path, 'w') as f:
        f.write(str1 % (url,))



def get_finder_selection_path():
    """Returns the full path to the current selection within the Finder.
    NOTE: Implementation is a bit of a hack.  command-C is sent to the current currnet app
    and the clipboard is read."""
    send_keys('c', 'command down')
    return os.path.join(get_finder_path(), get_clipboard())

def get_finder_path():
    """Returns path to folder in the top finder window"""
    path = osa_fn('tell application "Finder" to return POSIX path of ((folder of the front window) as text)')
    if path[-1]=='/': path = path[:-1] # Remove trailing '/'
    return path

def get_chrome_url():
    """Returns URL in top tab of chrome browser"""
    return osa_fn("tell application \"Google Chrome\" to get URL of active tab of first window")

def send_keys(keys, using=None):
    """Sends 'keys' with specified modifier key settings to the current application:
          shift down, control down, option down, command down"""
    using = "using %s" % using if using else ''
    osa("Tell Application \"System Events\" to keystroke \"%s\" %s" % (keys, using))

def send_key(keycode, using=''):
    """Send applescript key code to application
       Download  'key codes' from app store to get codes"""
    if using: using = 'using %s' % using
    osa("Tell Application \"System Events\" to key code %s %s" % (keycode, using))

# from  http://www.macdrifter.com/2011/12/python-and-the-mac-clipboard.html
def get_clipboard():
    p = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE)
    p.wait()
    data = p.stdout.read()
    return data

def set_clipboard(data):
    p = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
    p.stdin.write(data)
    p.stdin.close()
    retcode = p.wait()


def get_app_in_focus():
    return osa_fn(
'global frontApp, frontAppName, windowTitle',
'set windowTitle to ""',
'tell application "System Events"',
'    set frontApp to first application process whose frontmost is true',
'    set frontAppName to name of frontApp',
'    tell process frontAppName',
'        tell (1st window whose value of attribute "AXMain" is true)',
'            set windowTitle to value of attribute "AXTitle"',
'        end tell',
'    end tell',
'end tell',
'do shell script "echo " & quoted form of frontAppName')
#'return< {frontAppName, windowTitle}')


# Executes multi-line applescript.  (cannot contain single quote (') character)
def osa(*lines):
    """Executes multi-line applescript script"""
    os.system("osascript %s" % ' '.join(["-e '%s'" % line for line in lines]))


# Runs apple script lines and captures output
def osa_fn(*lines):
    """Executes multi-line applescript script, and returns the captured output."""
    cmd = ['/usr/bin/osascript']
    for l in lines:        cmd.append('-e'); cmd.append(l)
    p = subprocess.Popen(cmd, bufsize=0, stdout=subprocess.PIPE, stderr = subprocess.PIPE)
    stdout,stderr = p.communicate()
    return stdout.rstrip()

def system_to_str(*arglist):
    p = subprocess.Popen(arglist, bufsize=0, stdout=subprocess.PIPE, stderr = subprocess.PIPE)
    stdout,stderr = p.communicate()
    return stdout.rstrip()


#cmd_rescan('/ob/proj/EOC') #'/ob/topics/Life')
main()
